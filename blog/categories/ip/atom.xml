<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ip | John Xu's Blog]]></title>
  <link href="http://GinSmile.github.io/blog/categories/ip/atom.xml" rel="self"/>
  <link href="http://GinSmile.github.io/"/>
  <updated>2014-08-03T22:43:32+08:00</updated>
  <id>http://GinSmile.github.io/</id>
  <author>
    <name><![CDATA[John Xu]]></name>
    <email><![CDATA[xu.jin.smile@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[TCP/IP协议学习]]></title>
    <link href="http://GinSmile.github.io/blog/2014/08/03/tcp-ip-illustrated-1/"/>
    <updated>2014-08-03T22:35:00+08:00</updated>
    <id>http://GinSmile.github.io/blog/2014/08/03/tcp-ip-illustrated-1</id>
    <content type="html"><![CDATA[<p>本文是关于《TCP/IP详解》的读书笔记。</p>

<h2>第一章 概述</h2>

<h3>1.分层</h3>

<p>TCP/IP是一个协议族（又叫Internet协议族），是一组不同层次上的多个协议的组合。</p>

<blockquote><ul>
<li>应用层（Telnet，FTP等），负责处理特定的应用程序细节。</li>
<li>运输层（TCP，UDP），为两台主机上的应用程序提供端到端的通信。</li>
<li>网络层（IP，ICMP，IGMP），处理分组在网络中的活动，提供点到点的服务。</li>
<li>链路层（设备驱动程序以及接口卡，ARP，RARP），处理与电缆等传输媒介的物理接口细节。</li>
</ul>
</blockquote>

<p>其中，应用层通常是一个用户进程，处理应用程序细节，而下三层一般在操作系统内核中执行（如UNIX），处理通信细节。</p>

<p><strong>一个互联网就是一组通过相同协议族互联在一起的网络。</strong>可以通过路由器连接两个不同的网络（如以太网和令牌环网）。TCP/IP倾向于使用路由器而不是网桥来连接网络。
&ndash; internet：用一个共同的协议族把多个网络连接在一起。
&ndash; Internet：世界范围内通过TCP/IP互相通信的所有主机集合。internet是一个Internet。</p>

<h3>2. 互联网地址</h3>

<p>互联网上的每一个接口必须有一个唯一的Internet地址（IP地址）。32bit = 4Byte</p>

<pre><code>    - A类：0     7位网络号      24位主机号
    - B类：10    14位网络号     16位主机号
    - C类：110   21位网络号     8位主机号
    - D类：1110  28位多播组号
    - E类：11110 27位（留待后用）
</code></pre>

<p>点分十进制表示法，如A类中的一个为：127.0.0.1</p>

<h3>3. 域名系统</h3>

<p>域名系统（DNS）是一个分布的数据库，由他来提供IP地址和主机名之间的映射信息。</p>

<h3>4. 封装</h3>

<p>例如，当FTP数据从应用层开始通过TCP传输数据时，逐层封装，逐次加上
1. Appl首部
2. TCP首部
3. IP首部
4. 以太网首部</p>

<p>来声明生成数据的上一层协议的类型以及其他信息，方面数据的处理。</p>

<h3>5. 分用</h3>

<p>利用封装时的信息，每层协议都要检查报文首部中的协议标识，以确定接受数据的上层协议</p>

<h3>6. 客户-服务器模型</h3>

<p>两种服务模式：</p>

<p>1.重复型
&ndash; 1) 等待一个客户请求
&ndash; 2) 处理客户请求
&ndash; 3) 发送相应给请求的客户
&ndash; 4) 返回第1步</p>

<p>2.并发型
&ndash; 1) 等待一个客户请求
&ndash; 2) 启动一个新的服务器来处理这个客户请求，处理结束后终止这个新服务器
&ndash; 3)返回第1步</p>

<h3>7. 端口号</h3>

<ul>
<li>运输层的TCP和UDP使用16bit的端口号来识别应用程序。</li>
<li>必须是奇数，单工->全双工 时候的遗留，单工时候每个应用程序需要两个连接。</li>
<li>服务器使用知名端口号（1~1023），客户端使用临时端口号。</li>
</ul>


<h3>8. RFC</h3>

<p>RFC（Request for Comment），Internet的正是标准都以RFC文档出版。大量的RFC文档不是正式标准，RFC 数字越大内容越新。  <br/>
重要的RFC：
&ndash; 赋值RFC（Assigned Numbers RFC），<a href="http://www.ietf.org/rfc/rfc1340.txt">RFC1340</a>，列出了所有Internet协议中使用的数字和常数
&ndash; Internet正式协议标准，<a href="http://www.ietf.org/rfc/rfc1600.txt">RFC 1600</a>，描述了各种Internet协议的标准化现状
&ndash; 主机需求RFC，<a href="http://www.ietf.org/rfc/rfc1122.txt">RFC 1122</a>，<a href="http://www.ietf.org/rfc/rfc1123.txt">RFC 1123</a>，列出了协
议中关于“必须”、“应该”、“可以”、“不应该”或者“不能”等特性及其实现细节。
&ndash; 路由器需求RFC，<a href="http://www.ietf.org/rfc/rfc1009.txt">RFC 1009</a>，与主机需求R F C类似，但是只单独描述了路由器的需求。</p>

<h2>第二章 链路层</h2>

<p>在TCP/IP协议组中，链路层的目的：
1. 为IP模块发送和接受IP数据报
2. 为ARP模块发送ARP请求和接受ARP应答
3. 为RARP发送RARP请求和接受RARP应答</p>

<p>最常见的链路层封装是<strong>以太网封装格式</strong>（RFC 894）</p>
]]></content>
  </entry>
  
</feed>
